" =============================[VIm Configurations]=============================

set nocompatible              " be iMproved, required
filetype off                  " required

syntax enable
set background=dark
colorscheme solarized

set shell=/bin/bash
set nobackup
set noswapfile
set nowb

set t_Co=256
let base16colorspace=256
let &t_AB="\e[48;5;%dm"
let &t_AF="\e[38;5;%dm"

" ============================[ Plugin Installation ]============================

set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

Plugin 'vim-scripts/YankRing.vim'
Plugin 'tpope/vim-surround'
Plugin 'tpope/vim-fugitive'
Plugin 'tpope/vim-commentary'
Plugin 'terryma/vim-multiple-cursors'
Plugin 'sjl/gundo.vim'
Plugin 'sheerun/vim-polyglot'
Plugin 'scrooloose/syntastic'
Plugin 'scrooloose/NERDTree'
Plugin 'scrooloose/NERDCommenter'
Plugin 'rking/ag.vim'
Plugin 'plasticboy/vim-markdown'
Plugin 'nathanaelkane/vim-indent-guides'
Plugin 'mileszs/ack.vim'
Plugin 'mattn/emmet-vim'
Plugin 'majutsushi/tagbar'
Plugin 'lervag/vimtex'
Plugin 'kien/rainbow_parentheses.vim'
Plugin 'kien/ctrlp.vim'
Plugin 'honza/vim-snippets'
Plugin 'godlygeek/tabular'
Plugin 'gmarik/Vundle.vim'
Plugin 'easymotion/vim-easymotion'
Plugin 'bling/vim-airline'
Plugin 'Valloric/YouCompleteMe'
Plugin 'SirVer/ultisnips'

call vundle#end()            " required
filetype plugin indent on    " required
filetype plugin on

" ===========================[ Basic Configurations ]============================

let mapleader = ","
let g:mapleader = ","
let maplocalleader = ","
let g:maplocalleader = ","

noremap U :redo<cr>

set mouse=a
set ttymouse=xterm2
set nu
set ruler
set wrap
set autochdir
set textwidth=140
set formatoptions=qrn1
set linebreak
set modelines=0

set lazyredraw
set listchars=tab:··,nbsp:¬,trail:·,extends:❯,precedes:❮
set list

set history=256          " remember more commands and search history
set undolevels=256       " use many muchos levels of undo
set undodir=~/.vim/tmp/undo
set undofile

set title                " change the terminal's title
set visualbell           " don't beep
set noerrorbells         " don't beep

set nrformats=
set viminfo=
au FocusLost * silent! wa

set fileformat=unix
set fileformats=unix,dos

map <leader>cd :cd %:p:h<cr>:pwd<cr>
map 0 ^

" move line using alt+[jk]
nmap <M-j> mz:m+<cr>`z
nmap <M-k> mz:m-2<cr>`z
vmap <M-j> :m'>+<cr>`<my`>mzgv`yo`z
vmap <M-k> :m'<-2<cr>`>my`<mzgv`yo`z

" ===============================[ Key Remappings ]==============================

inoremap jk <esc>
nnoremap <Leader>`` :qa!<cr>

nnoremap <F5> :GundoToggle<CR>

nnoremap <Leader>gb :Gblame<cr>
nnoremap <Leader>gc :Gcommit<cr>
nnoremap <Leader>gd :Gdiff<cr>
nnoremap <Leader>gp :Git push<cr>
nnoremap <Leader>gr :Gremove<cr>
nnoremap <Leader>gs :Gstatus<cr>
nnoremap <Leader>gw :Gwrite<cr>
" Quickly stage, commit, and push the current file. Useful for editing .vimrc
nnoremap <Leader>gg :Gwrite<cr>:Gcommit -m 'update'<cr>:Git push<cr>

noremap go o<esc>
noremap gO O<esc>
noremap <Down> gj
noremap <Up> gk
nnoremap j gj
nnoremap k gk

nnoremap <leader>v V`]
nnoremap <leader>W :%s/\s\+$//<cr>:let @/=''<CR>
nnoremap <leader>ev :vsplit $MYVIMRC<cr>
nnoremap <leader>sv :source $MYVIMRC<cr>
nnoremap <leader>egv :vsplit ~/.vim/gvimrc<cr>
nnoremap <leader>sgv :source ~/.vim/gvimrc<cr>
nnoremap <leader>ef :vsplit ~/.config/fish/config.fish<cr>
nnoremap <leader>ed :vsplit ~/.vim/custom-dictionary.utf-8.add<cr>
nnoremap <leader>eg :vsplit ~/.gitconfig<cr>
nnoremap <leader>et :vsplit ~/.tmux.conf<cr>

nnoremap ; :
nnoremap <tab> %
vnoremap <tab> %

nnoremap <leader>n :set rnu!<CR>
vnoremap <leader>n :set rnu!<CR>

" ========================[ Tab & Spacing Configuration ]=======================

set tabstop=2
set shiftwidth=2
set softtabstop=2

set encoding=utf-8
set scrolloff=8
set scrolljump=3
set showmode
set showcmd
set hidden
set visualbell
set ttyfast
set backspace=indent,eol,start
set whichwrap+=<,>,h,l
set magic
set laststatus=2
set cursorline

set smarttab
set smartcase
set smartindent
set expandtab
set autoindent
set copyindent
set autoread
set autowrite
set more

set foldmethod=indent   "fold based on indent
set foldnestmax=3       "deepest fold is 3 levels
set nofoldenable        "dont fold by default

" =============================[ Ignored Wildcards ]============================

set wildmenu
set wildmode=list:longest,full
set wildignore=*.bak,*.pyc,*.class,*~
set wildignore+=.hg,.git,.svn                    " Version control
set wildignore+=*.aux,*.out,*.toc,*.log,*.fls,*.synctex.gz,*.fdb_latexmk
set wildignore+=*.jpg,*.bmp,*.gif,*.png,*.jpeg   " binary images
set wildignore+=*.o,*.obj,*.exe,*.dll,*.manifest " compiled object files
set wildignore+=*.spl                            " compiled spelling word lists
set wildignore+=*.sw?                            " Vim swap files
set wildignore+=*.DS_Store                       " OSX bullshit
set wildignore+=migrations                       " Django migrations
set wildignore+=*.orig                           " Merge resolution files
set wildignore+=vendor/rails/**
set wildignore+=vendor/cache/**
set wildignore+=*.gem
set wildignore+=log/**
set wildignore+=tmp/**
set wildignore+=*.so,*.swp,*.zip,*/.Trash/**,*.pdf,*.dmg,*/Library/**,*/.rbenv/**
set wildignore+=*/.nx/**,*.app

" =======================[ Window Splitting Configurations ]=====================

set splitright
set splitbelow

nnoremap _ :sp<cr>
nnoremap <bar> :vsp<cr>

nnoremap <leader>w <C-w>v<C-w>l
nnoremap <leader>q <C-w>s<C-w>j
nnoremap <C-h> <C-w>h
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l
nnoremap <C-j> <C-w>j

" ==========================[ Search Configurations ]============================

nnoremap / /\v
vnoremap / /\v
set smartcase
set gdefault
set incsearch
set showmatch
set hlsearch
set ignorecase

map <space> /
map <c-space> ?
nnoremap <leader><space> :noh<cr>  " clear search

" =========================[ Return to Line on Reopen ]==========================

augroup line_return
  au!
  au BufReadPost *
    \ if line("'\"") > 0 && line("'\"") <= line("$") |
    \     execute 'normal! g`"zvzz' |
    \ endif
augroup END

" ==========================[ NERDTree Configurations ]=========================

let g:NERDTreeBookmarksFile = "~/.vim/tmp/.NERDTreeBookmarks"
let NERDTreeShowBookmarks=1
let NERDTreeShowHidden=1
let NERDTreeIgnore=['\~$', '\.swp$', '\.git', '\.hg', '\.svn', '\.bzr']

nnoremap <silent> <S-Tab> :NERDTreeToggle<CR>
map <leader>nn :NERDTreeToggle<cr>
map <leader>nb :NERDTreeFromBookmark
map <leader>nf :NERDTreeFind<cr>
let g:NERDTreeQuitOnOpen=0
let NERDTreeShowHidden=1

" ===========================[ Airline Configurations ]=========================

let g:airline_powerline_fonts=1
let g:airline_left_sep=''
let g:airline_right_sep=''
let g:airline_theme='base16'

" =============================[ Automatic Commands ]===========================

autocmd BufRead,BufNewFile *.md setlocal spell
autocmd FileType gitcommit setlocal spell
set complete+=kspell

autocmd FileType * setlocal formatoptions-=cro
autocmd FileType c,cpp,java,rb,py,go,ss,css,html,js autocmd BufWritePre <buffer> :%s/\s\+$//e

autocmd bufEnter * silent! lcd %:p:h
autocmd filetype crontab setlocal nobackup nowritebackup
autocmd VimEnter * if empty(expand("%")) | startinsert | endif

autocmd filetype tex nnoremap <leader>ll :wa \| :!pdflatex %:t<cr>

" ====================[ Rainbow Parentheses Configurations ]====================

au VimEnter * RainbowParenthesesToggle
au Syntax * RainbowParenthesesLoadRound
au Syntax * RainbowParenthesesLoadSquare
au Syntax * RainbowParenthesesLoadBraces

" =========================[ Ultisnips Configurations ]=========================

" Trigger configuration. Do not use <tab> if you use https://github.com/Valloric/YouCompleteMe.
let g:UltiSnipsExpandTrigger="<c-t>"
let g:UltiSnipsJumpForwardTrigger="<c-b>"
let g:UltiSnipsJumpBackwardTrigger="<c-z>"

" If you want :UltiSnipsEdit to split your window.
let g:UltiSnipsEditSplit="vertical"

" Make UltiSnips works nicely with YCM
function! g:UltiSnips_Complete()
  call UltiSnips#ExpandSnippet()
  if g:ulti_expand_res == 0
    if pumvisible()
      return "\<C-n>"
    else
      call UltiSnips#JumpForwards()
      if g:ulti_jump_forwards_res == 0
        return "\<TAB>"
      endif
    endif
  endif
  return ""
endfunction

au BufEnter * exec "inoremap <silent> " . g:UltiSnipsExpandTrigger . " <C-R>=g:UltiSnips_Complete()<cr>"

" ============================[ Indent Guide Options ]==========================

let g:indent_guides_start_level = 2
let g:indent_guides_auto_colors = 0
autocmd VimEnter,Colorscheme * :hi IndentGuidesOdd  guibg=red   ctermbg=3
autocmd VimEnter,Colorscheme * :hi IndentGuidesEven guibg=green ctermbg=4

" =======================[ Vim Multiple Cursors Options ]=======================

let g:multi_cursor_use_default_mapping=0
let g:multi_cursor_next_key='<C-n>'
let g:multi_cursor_prev_key='<C-p>'
let g:multi_cursor_skip_key='<C-x>'
let g:multi_cursor_quit_key='<Esc>'
let g:multi_cursor_start_key='<F6>'

" ========================[ YouCompleteMe Configurations ]======================

let g:ycm_confirm_extra_conf = 0
let g:EclimCompletionMethod = 'omnifunc'
let g:ycm_filetype_blacklist = {
      \ 'notes' : 1,
      \ 'markdown' : 1,
      \ 'text' : 1,
      \ 'unite' : 1
      \}

" =========================[ YankRing Configurations ]==========================

let g:yankring_history_dir = '~/.vim/tmp/yankring'
